import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:latlong2/latlong.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPSPage
import 'package:endproject/screens/pump_page.dart';
import 'package:endproject/screens/sprinkler_page.dart';
import 'package:endproject/screens/gps_page.dart';
import 'package:endproject/screens/soil_detail_page.dart';
import 'package:endproject/screens/power_usage_page.dart';
import 'package:endproject/widgets/modern_card.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart'; // Import Font Awesome
// import 'package:endproject/utils/color_extensions.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ColorBrightness extension - ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏Ç‡∏≠‡∏á ESP32 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
const String esp32Url = 'http://192.168.1.100';

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({super.key});

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  double fontSize = 14; // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ fontSize ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ

  bool pumpOn = false;
  bool pumpAuto = true;

  bool sprinklerOn = false;
  bool sprinklerAuto = true;

  double waterLevel = 20;

  String date = '', time = '';
  Timer? timer;

  List<List<double>> traysCap = [List.filled(6, 0.0)];
  List<List<double>> traysRes = [List.filled(6, 0.0)];
  List<List<bool>> traysStatus = [List.filled(6, true)];
  List<bool> traysConnected = [true];

  List<Map<String, String>> waterHistory = [];
  List<Map<String, dynamic>> sprinklerHistory = [];

  final LatLng gpsPosition = const LatLng(18.7953, 98.9986);

  @override
  void initState() {
    super.initState();
    updateDateTime();
    timer = Timer.periodic(const Duration(seconds: 2), (_) {
      updateDateTime();
      fetchSoilData();
      fetchPumpStatus();
      fetchSprinklerStatus();
      controlAutoPump();
      controlAutoSprinkler();
    });
  }

  @override
  void dispose() {
    timer?.cancel();
    super.dispose();
  }

  void updateDateTime() {
    final now = DateTime.now();
    setState(() {
      date = DateFormat('dd/MM/yyyy').format(now);
      time = DateFormat('HH:mm:ss').format(now);
    });
  }

  // ‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Auto ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞ Auto ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå
  void controlAutoPump() {
    if (!pumpAuto) return;
    if (waterLevel < 9) {
      if (!pumpOn) togglePump(true);
    } else {
      if (pumpOn) togglePump(false);
    }
  }

  void controlAutoSprinkler() {
    if (!sprinklerAuto) return;
    for (int tray = 0; tray < traysCap.length; tray++) {
      double avg =
          ((traysCap[tray].reduce((a, b) => a + b) / 6) +
              (traysRes[tray].reduce((a, b) => a + b) / 6)) /
          2;
      if (avg < 70) {
        if (!sprinklerOn) {
          toggleSprinkler(true);
          sprinklerHistory.add({'tray': tray + 1, 'time': time});
          waterLevel = (waterLevel - 5).clamp(0, 30);
        }
      } else if (avg >= 80) {
        if (sprinklerOn) toggleSprinkler(false);
      }
    }
  }

  // ‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå (‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î)
  void togglePump(bool v) async {
    setState(() => pumpOn = v);
    final url = v ? '/pump/on' : '/pump/off';
    try {
      await http.get(Uri.parse('$esp32Url$url'));
    } catch (e) {
      print('Error: $e');
    }
    if (v) addWaterHistory();
  }

  void toggleSprinkler(bool v) async {
    setState(() => sprinklerOn = v);
    final url = v ? '/sprinkler/on' : '/sprinkler/off';
    try {
      await http.get(Uri.parse('$esp32Url$url'));
    } catch (e) {
      print('Error: $e');
    }
  }

  void addWaterHistory() {
    setState(() {
      waterHistory.add({'time': time, 'amount': '5 ‡∏•‡∏¥‡∏ï‡∏£'});
      waterLevel = (waterLevel + 5).clamp(0, 30);
    });
  }

  // ‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32
  void fetchSoilData() async {
    try {
      final res = await http.get(Uri.parse('$esp32Url/soil'));
      if (res.statusCode == 200) {
        final data = json.decode(res.body);
        setState(() {
          for (int tray = 0; tray < traysCap.length; tray++) {
            for (int i = 0; i < 6; i++) {
              String capKey = 'tray${tray + 1}_cap_sensor${i + 1}';
              String resKey = 'tray${tray + 1}_res_sensor${i + 1}';

              if (data.containsKey(capKey)) {
                double val = (data[capKey] as num).toDouble();
                traysCap[tray][i] = val;
                traysStatus[tray][i] = val >= 0;
              } else {
                traysStatus[tray][i] = false;
              }

              if (data.containsKey(resKey)) {
                traysRes[tray][i] = (data[resKey] as num).toDouble();
              }
            }
            traysConnected[tray] = true;
          }
        });
      }
    } catch (e) {
      print('Error soil fetch: $e');
    }
  }

  void fetchPumpStatus() async {
    // Placeholder API call to update pumpOn state
  }

  void fetchSprinklerStatus() async {
    // Placeholder API call to update sprinklerOn state
  }

  // ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡∏≤‡∏î‡∏õ‡∏•‡∏π‡∏Å (‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà)
  void addTray() {
    setState(() {
      traysCap.add(List.filled(6, 0.0));
      traysRes.add(List.filled(6, 0.0));
      traysStatus.add(List.filled(6, true));
      traysConnected.add(true);
    });
  }

  // ‡∏™‡πà‡∏ß‡∏ô Build UI ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ Dashboard
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade100,
      appBar: AppBar(
        backgroundColor: Colors.green.shade700,
        elevation: 6,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(bottom: Radius.circular(24)),
        ),
        title: Text(
          'üå± Smart Farm',
          style: TextStyle(
            fontSize: fontSize + 6,
            fontWeight: FontWeight.bold,
            color: Colors.white,
            letterSpacing: 1.5,
          ),
        ),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(24),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 10,
                    offset: const Offset(0, 6),
                  ),
                ],
              ),
              child: Padding(
                padding: const EdgeInsets.symmetric(
                  vertical: 24,
                  horizontal: 20,
                ),
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        // Changed to FontAwesomeIcons.calendarDays
                        Icon(
                          FontAwesomeIcons.calendarDays,
                          color: Colors.green.shade700,
                          size: 22,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          date,
                          style: TextStyle(
                            fontSize: fontSize + 4,
                            fontWeight: FontWeight.w700,
                            color: Colors.green.shade800,
                          ),
                        ),
                        const SizedBox(width: 16),
                        // Changed to FontAwesomeIcons.clock
                        Icon(
                          FontAwesomeIcons.clock,
                          color: Colors.green.shade700,
                          size: 22,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          time,
                          style: TextStyle(
                            fontSize: fontSize + 4,
                            fontWeight: FontWeight.w700,
                            color: Colors.green.shade800,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    Divider(
                      color: Colors.green.shade200,
                      thickness: 2,
                      indent: 30,
                      endIndent: 30,
                    ),
                    const SizedBox(height: 12),
                    Text(
                      '‡∏£‡∏∞‡∏ö‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: fontSize,
                        color: Colors.grey.shade700,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 18),
            // GridView ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π Dashboard
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                mainAxisSpacing: 20,
                crossAxisSpacing: 20,
                // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ childAspectRatio ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏™‡∏°‡∏î‡∏∏‡∏•
                // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1.0 ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                childAspectRatio: 0.9, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å 0.8 ‡πÄ‡∏õ‡πá‡∏ô 0.9
                children: [
                  // üö∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô
                  ModernCard(
                    title: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô',
                    subtitle: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô',
                    icon: FontAwesomeIcons.droplet, // ‡πÉ‡∏ä‡πâ Font Awesome icon
                    gradientColors: const [
                      Color.fromARGB(255, 155, 235, 173),
                      Color.fromARGB(255, 54, 249, 103),
                    ],
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => SoilDetailPageUpdated(
                            date: date,
                            time: time,
                            traysCap: traysCap,
                            traysRes: traysRes,
                            traysStatus: traysStatus,
                            traysConnected: traysConnected,
                            fontSize: fontSize,
                          ),
                        ),
                      );
                    },
                    titleFontSize: fontSize + 2,
                    subtitleFontSize: fontSize - 2,
                  ),

                  // üíß ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥
                  ModernCard(
                    title: '‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥',
                    subtitle: pumpOn ? '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà',
                    icon: FontAwesomeIcons.water, // ‡πÉ‡∏ä‡πâ Font Awesome icon
                    gradientColors: const [
                      Color.fromARGB(255, 159, 192, 255),
                      Color.fromARGB(255, 94, 207, 255),
                    ],
                    onTap: () async {
                      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å PumpPage
                      final updatedHistory = await Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => PumpPage(
                            initialPumpOn: pumpOn,
                            initialAuto: pumpAuto,
                            initialWaterLevel: waterLevel,
                            initialWaterHistory: waterHistory,
                            fontSize: fontSize,
                            onUpdateWaterHistory: (history) {
                              // Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô PumpPage
                              setState(() {
                                waterHistory = history;
                              });
                            },
                          ),
                        ),
                      );
                      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏Ç‡∏≠‡∏á Dashboard ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á waterHistory
                      if (updatedHistory is List<Map<String, String>>) {
                        setState(() {
                          waterHistory = updatedHistory;
                        });
                      }
                    },
                    titleFontSize: fontSize + 2,
                    subtitleFontSize: fontSize - 2,
                  ),

                  // üåæ ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå
                  ModernCard(
                    title: '‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå',
                    subtitle: sprinklerOn ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏î‡∏ô‡πâ‡∏≥' : '‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà',
                    icon: FontAwesomeIcons.seedling, // ‡πÉ‡∏ä‡πâ Font Awesome icon
                    gradientColors: const [
                      Color.fromARGB(255, 241, 203, 146),
                      Color.fromARGB(255, 249, 121, 82),
                    ],
                    onTap: () async {
                      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å SprinklerPage
                      final updatedHistory = await Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => SprinklerPage(
                            initialSprinklerOn: sprinklerOn,
                            initialAutoMode: sprinklerAuto,
                            initialHistory: sprinklerHistory,
                            fontSize: fontSize,
                            onUpdateHistory: (history) {
                              // Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô SprinklerPage
                              setState(() {
                                sprinklerHistory = history;
                              });
                            },
                          ),
                        ),
                      );
                      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏Ç‡∏≠‡∏á Dashboard ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á sprinklerHistory
                      if (updatedHistory is List<Map<String, dynamic>>) {
                        setState(() {
                          sprinklerHistory = updatedHistory;
                        });
                      }
                    },
                    titleFontSize: fontSize + 2,
                    subtitleFontSize: fontSize - 2,
                  ),

                  // ‚ö° ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
                  ModernCard(
                    title: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
                    subtitle: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô',
                    icon: FontAwesomeIcons.bolt, // ‡πÉ‡∏ä‡πâ Font Awesome icon
                    gradientColors: const [
                      Color.fromARGB(255, 238, 218, 153),
                      Color.fromARGB(255, 246, 193, 70),
                    ],
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => PowerUsagePage(
                            fontSize: fontSize,
                            sensors: const [
                              {'name': '‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥', 'watt': 12.5},
                              {'name': '‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå', 'watt': 8.3},
                              {'name': '‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå 1', 'watt': 0.3},
                              {'name': '‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå 2', 'watt': 0.3},
                              {'name': '‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå 3', 'watt': 0.3},
                            ],
                          ),
                        ),
                      );
                    },
                    titleFontSize: fontSize + 1,
                    subtitleFontSize: fontSize - 2,
                  ),

                  // üìç GPS Smart Farm
                  ModernCard(
                    title: 'GPS Smart Farm',
                    subtitle: '‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£',
                    icon: FontAwesomeIcons.locationDot, // ‡πÉ‡∏ä‡πâ Font Awesome icon
                    gradientColors: const [
                      Color.fromARGB(255, 252, 231, 179),
                      Color.fromARGB(255, 246, 174, 41),
                    ],
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => GPSPage(position: gpsPosition),
                        ),
                      );
                    },
                    titleFontSize: fontSize + 1,
                    subtitleFontSize: fontSize - 2,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Widget buildDashboardCard ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà widgets/dashboard_card.dart
  // Widget buildModernCard ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà widgets/modern_card.dart
}
